type AddCurrencyToken @entity(immutable: true) {
  id: Bytes!
  currencyToken: Bytes! # address
  priceFeedAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConsecutiveTransfer @entity(immutable: true) {
  id: Bytes!
  fromTokenId: BigInt! # uint256
  toTokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LastPrizeDraw @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  seriesID: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewSubPrize @entity {
  id: Bytes!
  seriesID: BigInt! # uint256
  subPrizeID: BigInt! # uint256
  prizeGroup: String! # string
  subPrizeName: String! # string
  subPrizeRemainingQuantity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  belongSeries: NewSeries!
}

type NewSeries @entity {
  id: Bytes!
  seriesID: BigInt! # uint256
  seriesName: String! # string
  totalTicketNumbers: BigInt! # uint256
  remainingTicketNumbers: BigInt! # uint256
  priceInUSDTWei: BigInt! # uint256
  isGoodArrived: Boolean! # bool
  estimateDeliverTime: BigInt! # uint256
  exchangeExpireTime: BigInt! # uint256
  exchangeTokenURI: String! # string
  unrevealTokenURI: String! # string
  revealTokenURI: String! # string
  seriesMetaDataURI: String! # string
  lastPrizeOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  NewPrizes: [NewSubPrize!] @derivedFrom(field: "belongSeries")
  NewTicketStatuses: [NewTicketStatus!] @derivedFrom(field: "belongSeries")
}

type IchibanSeries @entity(immutable: true) {
  id: Bytes!
  hash: String!
  belongSeries: NewSeries
  onChainSeriesID: BigInt
  content: String
  title: String
  thumbnailSrc: String
  backgroundSrc: String
  subContent: String
  IchibanKujiPrizes: [IchibanKujiPrize!] @derivedFrom(field: "belongSeries")
  NewTicketStatuses: [NewTicketStatus!]
    @derivedFrom(field: "belongIchibanSeries")
}

type IchibanKujiPrize @entity(immutable: true) {
  id: Bytes!
  hash: String!
  belongSeries: IchibanSeries!
  prizeId: String
  type: String
  groupName: String
  size: String
  prizeImageSrc: String
  groupTotalQuantity: String
  groupDescription: String
  isBlindBox: Boolean
  IchibanKujiSubPrizes: [IchibanKujiSubPrize!] @derivedFrom(field: "belongIchibanPrize")
}

type IchibanKujiSubPrize @entity(immutable: true) {
  id: Bytes!
  hash: String!
  belongIchibanPrize: IchibanKujiPrize!
  subPrizeId: String
  prizeGroup: String
  name: String
  size: String
  subPrizeImageSrc: String
  quantity: String
  description: String
}

type NewTicketStatus @entity {
  id: Bytes!
  tokenID: BigInt! # uint256
  seriesID: BigInt! # uint256
  tokenRevealedPrize: BigInt! # uint256
  tokenExchange: Boolean! # bool
  tokenRevealed: Boolean! # bool
  tokenOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  belongSeries: NewSeries!
  belongIchibanSeries: IchibanSeries!
  belongIchibanSubPrize: IchibanKujiSubPrize
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestExchangePrize @entity(immutable: true) {
  id: Bytes!
  tokenIDs: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestFulfilled @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  randomWords: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RevealToken @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  seriesID: BigInt! # uint256
  tokenIDs: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenMintByAdmin @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  seriesID: BigInt! # uint256
  quantity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenMintByCurrency @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  quantity: BigInt! # uint256
  seriesID: BigInt! # uint256
  currencyToken: Bytes! # address
  totalCostInWei: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenMintByMatic @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  quantity: BigInt! # uint256
  seriesID: BigInt! # uint256
  totalCostInMaticWei: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatePrize @entity(immutable: true) {
  id: Bytes!
  seriesID: BigInt! # uint256
  subPrizeID: BigInt! # uint256
  subPrizeRemainingQuantity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateSeriesInformation @entity(immutable: true) {
  id: Bytes!
  seriesID: BigInt! # uint256
  isGoodArrived: Boolean! # bool
  estimateDeliverTime: BigInt! # uint256
  exchangeTokenURI: String! # string
  unrevealTokenURI: String! # string
  revealTokenURI: String! # string
  seriesMetaDataURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateSeriesLastPrizeOwner @entity(immutable: true) {
  id: Bytes!
  seriesID: BigInt! # uint256
  lastPrizeOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateSeriesRemainingTicketNumbers @entity(immutable: true) {
  id: Bytes!
  seriesID: BigInt! # uint256
  remainingTicketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateTicketStatus @entity(immutable: true) {
  id: Bytes!
  tokenID: BigInt! # uint256
  seriesID: BigInt! # uint256
  tokenRevealedPrize: BigInt! # uint256
  tokenExchange: Boolean! # bool
  tokenRevealed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
