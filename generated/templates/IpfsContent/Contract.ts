// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddCurrencyToken extends ethereum.Event {
  get params(): AddCurrencyToken__Params {
    return new AddCurrencyToken__Params(this);
  }
}

export class AddCurrencyToken__Params {
  _event: AddCurrencyToken;

  constructor(event: AddCurrencyToken) {
    this._event = event;
  }

  get currencyToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get priceFeedAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ConsecutiveTransfer extends ethereum.Event {
  get params(): ConsecutiveTransfer__Params {
    return new ConsecutiveTransfer__Params(this);
  }
}

export class ConsecutiveTransfer__Params {
  _event: ConsecutiveTransfer;

  constructor(event: ConsecutiveTransfer) {
    this._event = event;
  }

  get fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LastPrizeDraw extends ethereum.Event {
  get params(): LastPrizeDraw__Params {
    return new LastPrizeDraw__Params(this);
  }
}

export class LastPrizeDraw__Params {
  _event: LastPrizeDraw;

  constructor(event: LastPrizeDraw) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewSeries extends ethereum.Event {
  get params(): NewSeries__Params {
    return new NewSeries__Params(this);
  }
}

export class NewSeries__Params {
  _event: NewSeries;

  constructor(event: NewSeries) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seriesName(): string {
    return this._event.parameters[1].value.toString();
  }

  get totalTicketNumbers(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingTicketNumbers(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get priceInUSDTWei(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isGoodArrived(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get estimateDeliverTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get exchangeExpireTime(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get exchangeTokenURI(): string {
    return this._event.parameters[8].value.toString();
  }

  get unrevealTokenURI(): string {
    return this._event.parameters[9].value.toString();
  }

  get revealTokenURI(): string {
    return this._event.parameters[10].value.toString();
  }

  get seriesMetaDataURI(): string {
    return this._event.parameters[11].value.toString();
  }

  get lastPrizeOwner(): Address {
    return this._event.parameters[12].value.toAddress();
  }
}

export class NewSubPrize extends ethereum.Event {
  get params(): NewSubPrize__Params {
    return new NewSubPrize__Params(this);
  }
}

export class NewSubPrize__Params {
  _event: NewSubPrize;

  constructor(event: NewSubPrize) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subPrizeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get prizeGroup(): string {
    return this._event.parameters[2].value.toString();
  }

  get subPrizeName(): string {
    return this._event.parameters[3].value.toString();
  }

  get subPrizeRemainingQuantity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewTicketStatus extends ethereum.Event {
  get params(): NewTicketStatus__Params {
    return new NewTicketStatus__Params(this);
  }
}

export class NewTicketStatus__Params {
  _event: NewTicketStatus;

  constructor(event: NewTicketStatus) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenRevealedPrize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenExchange(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get tokenRevealed(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get tokenOwner(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestExchangePrize extends ethereum.Event {
  get params(): RequestExchangePrize__Params {
    return new RequestExchangePrize__Params(this);
  }
}

export class RequestExchangePrize__Params {
  _event: RequestExchangePrize;

  constructor(event: RequestExchangePrize) {
    this._event = event;
  }

  get tokenIDs(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class RevealToken extends ethereum.Event {
  get params(): RevealToken__Params {
    return new RevealToken__Params(this);
  }
}

export class RevealToken__Params {
  _event: RevealToken;

  constructor(event: RevealToken) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenIDs(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class TokenMintByAdmin extends ethereum.Event {
  get params(): TokenMintByAdmin__Params {
    return new TokenMintByAdmin__Params(this);
  }
}

export class TokenMintByAdmin__Params {
  _event: TokenMintByAdmin;

  constructor(event: TokenMintByAdmin) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seriesID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenMintByCurrency extends ethereum.Event {
  get params(): TokenMintByCurrency__Params {
    return new TokenMintByCurrency__Params(this);
  }
}

export class TokenMintByCurrency__Params {
  _event: TokenMintByCurrency;

  constructor(event: TokenMintByCurrency) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currencyToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get totalCostInWei(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenMintByMatic extends ethereum.Event {
  get params(): TokenMintByMatic__Params {
    return new TokenMintByMatic__Params(this);
  }
}

export class TokenMintByMatic__Params {
  _event: TokenMintByMatic;

  constructor(event: TokenMintByMatic) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalCostInMaticWei(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatePrize extends ethereum.Event {
  get params(): UpdatePrize__Params {
    return new UpdatePrize__Params(this);
  }
}

export class UpdatePrize__Params {
  _event: UpdatePrize;

  constructor(event: UpdatePrize) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subPrizeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get subPrizeRemainingQuantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateSeriesInformation extends ethereum.Event {
  get params(): UpdateSeriesInformation__Params {
    return new UpdateSeriesInformation__Params(this);
  }
}

export class UpdateSeriesInformation__Params {
  _event: UpdateSeriesInformation;

  constructor(event: UpdateSeriesInformation) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isGoodArrived(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get estimateDeliverTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exchangeTokenURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get unrevealTokenURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get revealTokenURI(): string {
    return this._event.parameters[5].value.toString();
  }

  get seriesMetaDataURI(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class UpdateSeriesLastPrizeOwner extends ethereum.Event {
  get params(): UpdateSeriesLastPrizeOwner__Params {
    return new UpdateSeriesLastPrizeOwner__Params(this);
  }
}

export class UpdateSeriesLastPrizeOwner__Params {
  _event: UpdateSeriesLastPrizeOwner;

  constructor(event: UpdateSeriesLastPrizeOwner) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastPrizeOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateSeriesRemainingTicketNumbers extends ethereum.Event {
  get params(): UpdateSeriesRemainingTicketNumbers__Params {
    return new UpdateSeriesRemainingTicketNumbers__Params(this);
  }
}

export class UpdateSeriesRemainingTicketNumbers__Params {
  _event: UpdateSeriesRemainingTicketNumbers;

  constructor(event: UpdateSeriesRemainingTicketNumbers) {
    this._event = event;
  }

  get seriesID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get remainingTicketNumbers(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateTicketStatus extends ethereum.Event {
  get params(): UpdateTicketStatus__Params {
    return new UpdateTicketStatus__Params(this);
  }
}

export class UpdateTicketStatus__Params {
  _event: UpdateTicketStatus;

  constructor(event: UpdateTicketStatus) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seriesID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenRevealedPrize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenExchange(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get tokenRevealed(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Contract__ICHISeriesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: string;
  value9: string;
  value10: string;
  value11: string;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: string,
    value9: string,
    value10: string,
    value11: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    map.set("value10", ethereum.Value.fromString(this.value10));
    map.set("value11", ethereum.Value.fromString(this.value11));
    return map;
  }

  getSeriesName(): string {
    return this.value0;
  }

  getTotalTicketNumbers(): BigInt {
    return this.value1;
  }

  getRemainingTicketNumbers(): BigInt {
    return this.value2;
  }

  getPriceInUSDTWei(): BigInt {
    return this.value3;
  }

  getIsGoodArrived(): boolean {
    return this.value4;
  }

  getEstimateDeliverTime(): BigInt {
    return this.value5;
  }

  getExchangeExpireTime(): BigInt {
    return this.value6;
  }

  getLastPrizeOwner(): Address {
    return this.value7;
  }

  getExchangeTokenURI(): string {
    return this.value8;
  }

  getUnrevealTokenURI(): string {
    return this.value9;
  }

  getRevealTokenURI(): string {
    return this.value10;
  }

  getSeriesMetaDataURI(): string {
    return this.value11;
  }
}

export class Contract__currencyListResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getCurrencyToken(): Address {
    return this.value0;
  }

  getPriceFeedAddress(): Address {
    return this.value1;
  }
}

export class Contract__getSeriesTokenListResultValue0Struct extends ethereum.Tuple {
  get tokenID(): BigInt {
    return this[0].toBigInt();
  }

  get tokenOwner(): Address {
    return this[1].toAddress();
  }

  get ticketStatus(): Contract__getSeriesTokenListResultValue0TicketStatusStruct {
    return changetype<Contract__getSeriesTokenListResultValue0TicketStatusStruct>(
      this[2].toTuple(),
    );
  }
}

export class Contract__getSeriesTokenListResultValue0TicketStatusStruct extends ethereum.Tuple {
  get seriesID(): BigInt {
    return this[0].toBigInt();
  }

  get tokenRevealedPrize(): BigInt {
    return this[1].toBigInt();
  }

  get tokenExchange(): boolean {
    return this[2].toBoolean();
  }

  get tokenRevealed(): boolean {
    return this[3].toBoolean();
  }
}

export class Contract__ticketStatusDetailResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getSeriesID(): BigInt {
    return this.value0;
  }

  getTokenRevealedPrize(): BigInt {
    return this.value1;
  }

  getTokenExchange(): boolean {
    return this.value2;
  }

  getTokenRevealed(): boolean {
    return this.value3;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  ICHISeries(param0: BigInt): Contract__ICHISeriesResult {
    let result = super.call(
      "ICHISeries",
      "ICHISeries(uint256):(string,uint256,uint256,uint256,bool,uint256,uint256,address,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__ICHISeriesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toString(),
      result[9].toString(),
      result[10].toString(),
      result[11].toString(),
    );
  }

  try_ICHISeries(
    param0: BigInt,
  ): ethereum.CallResult<Contract__ICHISeriesResult> {
    let result = super.tryCall(
      "ICHISeries",
      "ICHISeries(uint256):(string,uint256,uint256,uint256,bool,uint256,uint256,address,string,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__ICHISeriesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toString(),
        value[9].toString(),
        value[10].toString(),
        value[11].toString(),
      ),
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyList(param0: BigInt): Contract__currencyListResult {
    let result = super.call(
      "currencyList",
      "currencyList(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__currencyListResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_currencyList(
    param0: BigInt,
  ): ethereum.CallResult<Contract__currencyListResult> {
    let result = super.tryCall(
      "currencyList",
      "currencyList(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__currencyListResult(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainlinkDataFeedLatestAnswer(priceFeedAddresss: Address): BigInt {
    let result = super.call(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer(address):(int256)",
      [ethereum.Value.fromAddress(priceFeedAddresss)],
    );

    return result[0].toBigInt();
  }

  try_getChainlinkDataFeedLatestAnswer(
    priceFeedAddresss: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer(address):(int256)",
      [ethereum.Value.fromAddress(priceFeedAddresss)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSeriesTokenList(
    seriesID: BigInt,
  ): Array<Contract__getSeriesTokenListResultValue0Struct> {
    let result = super.call(
      "getSeriesTokenList",
      "getSeriesTokenList(uint256):((uint256,address,(uint256,uint256,bool,bool))[])",
      [ethereum.Value.fromUnsignedBigInt(seriesID)],
    );

    return result[0].toTupleArray<Contract__getSeriesTokenListResultValue0Struct>();
  }

  try_getSeriesTokenList(
    seriesID: BigInt,
  ): ethereum.CallResult<
    Array<Contract__getSeriesTokenListResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSeriesTokenList",
      "getSeriesTokenList(uint256):((uint256,address,(uint256,uint256,bool,bool))[])",
      [ethereum.Value.fromUnsignedBigInt(seriesID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getSeriesTokenListResultValue0Struct>(),
    );
  }

  getSeriesTokenOwnerList(seriesID: BigInt): Array<Address> {
    let result = super.call(
      "getSeriesTokenOwnerList",
      "getSeriesTokenOwnerList(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(seriesID)],
    );

    return result[0].toAddressArray();
  }

  try_getSeriesTokenOwnerList(
    seriesID: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSeriesTokenOwnerList",
      "getSeriesTokenOwnerList(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(seriesID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSeriesTotalLength(): BigInt {
    let result = super.call(
      "getSeriesTotalLength",
      "getSeriesTotalLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getSeriesTotalLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSeriesTotalLength",
      "getSeriesTotalLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkToken(): Address {
    let result = super.call("linkToken", "linkToken():(address)", []);

    return result[0].toAddress();
  }

  try_linkToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkToken", "linkToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestToLastPrizeToken(param0: BigInt): BigInt {
    let result = super.call(
      "requestToLastPrizeToken",
      "requestToLastPrizeToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_requestToLastPrizeToken(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestToLastPrizeToken",
      "requestToLastPrizeToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestToRevealToken(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "requestToRevealToken",
      "requestToRevealToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_requestToRevealToken(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestToRevealToken",
      "requestToRevealToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(param0: BigInt): i32 {
    let result = super.call("requests", "requests(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toI32();
  }

  try_requests(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("requests", "requests(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  seriesTokens(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "seriesTokens",
      "seriesTokens(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_seriesTokens(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seriesTokens",
      "seriesTokens(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ticketStatusDetail(param0: BigInt): Contract__ticketStatusDetailResult {
    let result = super.call(
      "ticketStatusDetail",
      "ticketStatusDetail(uint256):(uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__ticketStatusDetailResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
    );
  }

  try_ticketStatusDetail(
    param0: BigInt,
  ): ethereum.CallResult<Contract__ticketStatusDetailResult> {
    let result = super.tryCall(
      "ticketStatusDetail",
      "ticketStatusDetail(uint256):(uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__ticketStatusDetailResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
      ),
    );
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _linkToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminMintCall extends ethereum.Call {
  get inputs(): AdminMintCall__Inputs {
    return new AdminMintCall__Inputs(this);
  }

  get outputs(): AdminMintCall__Outputs {
    return new AdminMintCall__Outputs(this);
  }
}

export class AdminMintCall__Inputs {
  _call: AdminMintCall;

  constructor(call: AdminMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seriesID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AdminMintCall__Outputs {
  _call: AdminMintCall;

  constructor(call: AdminMintCall) {
    this._call = call;
  }
}

export class AddCurrencyTokenCall extends ethereum.Call {
  get inputs(): AddCurrencyTokenCall__Inputs {
    return new AddCurrencyTokenCall__Inputs(this);
  }

  get outputs(): AddCurrencyTokenCall__Outputs {
    return new AddCurrencyTokenCall__Outputs(this);
  }
}

export class AddCurrencyTokenCall__Inputs {
  _call: AddCurrencyTokenCall;

  constructor(call: AddCurrencyTokenCall) {
    this._call = call;
  }

  get currencyToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get priceFeedAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCurrencyTokenCall__Outputs {
  _call: AddCurrencyTokenCall;

  constructor(call: AddCurrencyTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChooseLastPrizeWinnerCall extends ethereum.Call {
  get inputs(): ChooseLastPrizeWinnerCall__Inputs {
    return new ChooseLastPrizeWinnerCall__Inputs(this);
  }

  get outputs(): ChooseLastPrizeWinnerCall__Outputs {
    return new ChooseLastPrizeWinnerCall__Outputs(this);
  }
}

export class ChooseLastPrizeWinnerCall__Inputs {
  _call: ChooseLastPrizeWinnerCall;

  constructor(call: ChooseLastPrizeWinnerCall) {
    this._call = call;
  }

  get seriesID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChooseLastPrizeWinnerCall__Outputs {
  _call: ChooseLastPrizeWinnerCall;

  constructor(call: ChooseLastPrizeWinnerCall) {
    this._call = call;
  }
}

export class CreateSeriesCall extends ethereum.Call {
  get inputs(): CreateSeriesCall__Inputs {
    return new CreateSeriesCall__Inputs(this);
  }

  get outputs(): CreateSeriesCall__Outputs {
    return new CreateSeriesCall__Outputs(this);
  }
}

export class CreateSeriesCall__Inputs {
  _call: CreateSeriesCall;

  constructor(call: CreateSeriesCall) {
    this._call = call;
  }

  get seriesName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get priceInUSDTWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get estimateDeliverTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get exchangeTokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get unrevealTokenURI(): string {
    return this._call.inputValues[4].value.toString();
  }

  get revealTokenURI(): string {
    return this._call.inputValues[5].value.toString();
  }

  get seriesMetaDataURI(): string {
    return this._call.inputValues[6].value.toString();
  }

  get subPrizes(): Array<CreateSeriesCallSubPrizesStruct> {
    return this._call.inputValues[7].value.toTupleArray<CreateSeriesCallSubPrizesStruct>();
  }
}

export class CreateSeriesCall__Outputs {
  _call: CreateSeriesCall;

  constructor(call: CreateSeriesCall) {
    this._call = call;
  }
}

export class CreateSeriesCallSubPrizesStruct extends ethereum.Tuple {
  get subPrizeID(): BigInt {
    return this[0].toBigInt();
  }

  get prizeGroup(): string {
    return this[1].toString();
  }

  get subPrizeName(): string {
    return this[2].toString();
  }

  get subPrizeRemainingQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExchangePrizeCall extends ethereum.Call {
  get inputs(): ExchangePrizeCall__Inputs {
    return new ExchangePrizeCall__Inputs(this);
  }

  get outputs(): ExchangePrizeCall__Outputs {
    return new ExchangePrizeCall__Outputs(this);
  }
}

export class ExchangePrizeCall__Inputs {
  _call: ExchangePrizeCall;

  constructor(call: ExchangePrizeCall) {
    this._call = call;
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ExchangePrizeCall__Outputs {
  _call: ExchangePrizeCall;

  constructor(call: ExchangePrizeCall) {
    this._call = call;
  }
}

export class GoodsArrivedCall extends ethereum.Call {
  get inputs(): GoodsArrivedCall__Inputs {
    return new GoodsArrivedCall__Inputs(this);
  }

  get outputs(): GoodsArrivedCall__Outputs {
    return new GoodsArrivedCall__Outputs(this);
  }
}

export class GoodsArrivedCall__Inputs {
  _call: GoodsArrivedCall;

  constructor(call: GoodsArrivedCall) {
    this._call = call;
  }

  get seriesID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GoodsArrivedCall__Outputs {
  _call: GoodsArrivedCall;

  constructor(call: GoodsArrivedCall) {
    this._call = call;
  }
}

export class MintByCurrencyCall extends ethereum.Call {
  get inputs(): MintByCurrencyCall__Inputs {
    return new MintByCurrencyCall__Inputs(this);
  }

  get outputs(): MintByCurrencyCall__Outputs {
    return new MintByCurrencyCall__Outputs(this);
  }
}

export class MintByCurrencyCall__Inputs {
  _call: MintByCurrencyCall;

  constructor(call: MintByCurrencyCall) {
    this._call = call;
  }

  get seriesID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get CurrencyIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintByCurrencyCall__Outputs {
  _call: MintByCurrencyCall;

  constructor(call: MintByCurrencyCall) {
    this._call = call;
  }
}

export class MintByMaticCall extends ethereum.Call {
  get inputs(): MintByMaticCall__Inputs {
    return new MintByMaticCall__Inputs(this);
  }

  get outputs(): MintByMaticCall__Outputs {
    return new MintByMaticCall__Outputs(this);
  }
}

export class MintByMaticCall__Inputs {
  _call: MintByMaticCall;

  constructor(call: MintByMaticCall) {
    this._call = call;
  }

  get seriesID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintByMaticCall__Outputs {
  _call: MintByMaticCall;

  constructor(call: MintByMaticCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevealCall extends ethereum.Call {
  get inputs(): RevealCall__Inputs {
    return new RevealCall__Inputs(this);
  }

  get outputs(): RevealCall__Outputs {
    return new RevealCall__Outputs(this);
  }
}

export class RevealCall__Inputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }

  get seriesID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RevealCall__Outputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCurrencyTokenCall extends ethereum.Call {
  get inputs(): WithdrawCurrencyTokenCall__Inputs {
    return new WithdrawCurrencyTokenCall__Inputs(this);
  }

  get outputs(): WithdrawCurrencyTokenCall__Outputs {
    return new WithdrawCurrencyTokenCall__Outputs(this);
  }
}

export class WithdrawCurrencyTokenCall__Inputs {
  _call: WithdrawCurrencyTokenCall;

  constructor(call: WithdrawCurrencyTokenCall) {
    this._call = call;
  }

  get currencyToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCurrencyTokenCall__Outputs {
  _call: WithdrawCurrencyTokenCall;

  constructor(call: WithdrawCurrencyTokenCall) {
    this._call = call;
  }
}
